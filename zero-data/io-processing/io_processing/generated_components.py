# generated by datamodel-codegen:
#   filename:  components.schema.json
#   timestamp: 2024-12-20T12:41:28+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Extra


class Type1(Enum):
    bool = "bool"
    f32 = "f32"
    u32 = "u32"
    i32 = "i32"


class Values(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Type1
    name: str


class Type(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[str] = None
    values: Dict[str, Values]


class Suppliers(BaseModel):
    class Config:
        extra = Extra.forbid

    types: List[Type]


class Type2(Enum):
    Valve = "Valve"
    LevelSensor = "LevelSensor"
    WaterSensor = "WaterSensor"
    Pump = "Pump"
    WaterMaker = "WaterMaker"
    ChlorineDosingUnit = "ChlorineDosingUnit"
    WaterSeparator = "WaterSeparator"
    PressureSensor = "PressureSensor"
    FlowSensor = "FlowSensor"
    TemperatureSensor = "TemperatureSensor"
    Fan = "Fan"
    FireFlap = "FireFlap"
    AccelerationSensor = "AccelerationSensor"


class Component(BaseModel):
    tag: Optional[str] = None
    type: Optional[Type2] = None


class System(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    supplier: str
    components: List[Component]


class Description(BaseModel):
    class Config:
        extra = Extra.forbid

    suppliers: Dict[str, Suppliers]
    systems: List[System]
