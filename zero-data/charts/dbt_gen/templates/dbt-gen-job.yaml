apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "zero-dbt-gen.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "zero-dbt-gen.labels" . | nindent 4 }}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        {{- include "zero-dbt-gen.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      securityContext:
        fsGroupChangePolicy: Always
        sysctls: []
        supplementalGroups: []
        fsGroup: 1001
      containers:
        - name: dbt-gen
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command: ["dbt", "run", "--project-dir", "./dbt", "--profiles-dir", "./dbt", "--target-path", "/dbt_output", "--log-path", "/dbt_output","--target", "{{ .Values.dbt.target }}"]
          volumeMounts:
            - name: dbt-output
              mountPath: /dbt_output
          env:
            - name: GCS_CREDENTIAL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.gcs.existingSecret }}
                  key: {{ .Values.gcs.existingSecretGCSCredentialKey }}
          envFrom:
            - configMapRef:
                name: {{ include "zero-dbt-gen.fullname" . }}-envvars
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: dbt-output
          emptyDir: {}
