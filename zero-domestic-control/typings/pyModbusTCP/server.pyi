from .constants import ENCAPSULATED_INTERFACE_TRANSPORT as ENCAPSULATED_INTERFACE_TRANSPORT, EXP_DATA_ADDRESS as EXP_DATA_ADDRESS, EXP_DATA_VALUE as EXP_DATA_VALUE, EXP_ILLEGAL_FUNCTION as EXP_ILLEGAL_FUNCTION, EXP_NONE as EXP_NONE, MAX_PDU_SIZE as MAX_PDU_SIZE, MEI_TYPE_READ_DEVICE_ID as MEI_TYPE_READ_DEVICE_ID, READ_COILS as READ_COILS, READ_DISCRETE_INPUTS as READ_DISCRETE_INPUTS, READ_HOLDING_REGISTERS as READ_HOLDING_REGISTERS, READ_INPUT_REGISTERS as READ_INPUT_REGISTERS, WRITE_MULTIPLE_COILS as WRITE_MULTIPLE_COILS, WRITE_MULTIPLE_REGISTERS as WRITE_MULTIPLE_REGISTERS, WRITE_READ_MULTIPLE_REGISTERS as WRITE_READ_MULTIPLE_REGISTERS, WRITE_SINGLE_COIL as WRITE_SINGLE_COIL, WRITE_SINGLE_REGISTER as WRITE_SINGLE_REGISTER
from .utils import set_bit as set_bit, test_bit as test_bit
from _typeshed import Incomplete
from socketserver import BaseRequestHandler

logger: Incomplete

class DataBank:
    @classmethod
    def get_bits(cls, *_args, **_kwargs) -> None: ...
    @classmethod
    def set_bits(cls, *_args, **_kwargs) -> None: ...
    @classmethod
    def get_words(cls, *_args, **_kwargs) -> None: ...
    @classmethod
    def set_words(cls, *_args, **_kwargs) -> None: ...
    coils_size: Incomplete
    coils_default_value: Incomplete
    d_inputs_size: Incomplete
    d_inputs_default_value: Incomplete
    h_regs_size: Incomplete
    h_regs_default_value: Incomplete
    i_regs_size: Incomplete
    i_regs_default_value: Incomplete
    virtual_mode: Incomplete
    def __init__(self, coils_size: int = 65536, coils_default_value: bool = False, d_inputs_size: int = 65536, d_inputs_default_value: bool = False, h_regs_size: int = 65536, h_regs_default_value: int = 0, i_regs_size: int = 65536, i_regs_default_value: int = 0, virtual_mode: bool = False) -> None: ...
    def get_coils(self, address, number: int = 1, srv_info: Incomplete | None = None): ...
    def set_coils(self, address, bit_list, srv_info: Incomplete | None = None): ...
    def get_discrete_inputs(self, address, number: int = 1, srv_info: Incomplete | None = None): ...
    def set_discrete_inputs(self, address, bit_list): ...
    def get_holding_registers(self, address, number: int = 1, srv_info: Incomplete | None = None): ...
    def set_holding_registers(self, address, word_list, srv_info: Incomplete | None = None): ...
    def get_input_registers(self, address, number: int = 1, srv_info: Incomplete | None = None): ...
    def set_input_registers(self, address, word_list): ...
    def on_coils_change(self, address, from_value, to_value, srv_info) -> None: ...
    def on_holding_registers_change(self, address, from_value, to_value, srv_info) -> None: ...

class DataHandler:
    class Return:
        exp_code: Incomplete
        data: Incomplete
        def __init__(self, exp_code, data: Incomplete | None = None) -> None: ...
        @property
        def ok(self): ...
    data_bank: Incomplete
    def __init__(self, data_bank: Incomplete | None = None) -> None: ...
    def read_coils(self, address, count, srv_info): ...
    def write_coils(self, address, bits_l, srv_info): ...
    def read_d_inputs(self, address, count, srv_info): ...
    def read_h_regs(self, address, count, srv_info): ...
    def write_h_regs(self, address, words_l, srv_info): ...
    def read_i_regs(self, address, count, srv_info): ...

class DeviceIdentification:
    def __init__(self, vendor_name: bytes = b'', product_code: bytes = b'', major_minor_revision: bytes = b'', vendor_url: bytes = b'', product_name: bytes = b'', model_name: bytes = b'', user_application_name: bytes = b'', objects_id: Incomplete | None = None) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    @property
    def vendor_name(self): ...
    @vendor_name.setter
    def vendor_name(self, value) -> None: ...
    @property
    def product_code(self): ...
    @product_code.setter
    def product_code(self, value) -> None: ...
    @property
    def major_minor_revision(self): ...
    @major_minor_revision.setter
    def major_minor_revision(self, value) -> None: ...
    @property
    def vendor_url(self): ...
    @vendor_url.setter
    def vendor_url(self, value) -> None: ...
    @property
    def product_name(self): ...
    @product_name.setter
    def product_name(self, value) -> None: ...
    @property
    def model_name(self): ...
    @model_name.setter
    def model_name(self, value) -> None: ...
    @property
    def user_application_name(self): ...
    @user_application_name.setter
    def user_application_name(self, value) -> None: ...
    def items(self, start: int = 0, end: int = 255): ...

class ModbusServer:
    class Error(Exception): ...
    class NetworkError(Error): ...
    class DataFormatError(Error): ...
    class ClientInfo:
        address: Incomplete
        port: Incomplete
        def __init__(self, address: str = '', port: int = 0) -> None: ...
    class ServerInfo:
        client: Incomplete
        recv_frame: Incomplete
        def __init__(self) -> None: ...
    class SessionData:
        client: Incomplete
        request: Incomplete
        response: Incomplete
        def __init__(self) -> None: ...
        @property
        def srv_info(self): ...
        def new_request(self) -> None: ...
        def set_response_mbap(self) -> None: ...
    class Frame:
        mbap: Incomplete
        pdu: Incomplete
        def __init__(self) -> None: ...
        @property
        def raw(self): ...
    class MBAP:
        transaction_id: Incomplete
        protocol_id: Incomplete
        length: Incomplete
        unit_id: Incomplete
        def __init__(self, transaction_id: int = 0, protocol_id: int = 0, length: int = 0, unit_id: int = 0) -> None: ...
        @property
        def raw(self): ...
        @raw.setter
        def raw(self, value) -> None: ...
    class PDU:
        raw: Incomplete
        def __init__(self, raw: bytes = b'') -> None: ...
        def __len__(self) -> int: ...
        @property
        def func_code(self): ...
        @property
        def except_code(self): ...
        @property
        def is_except(self): ...
        @property
        def is_valid(self): ...
        def clear(self) -> None: ...
        def build_except(self, func_code, exp_status): ...
        def add_pack(self, fmt, *args) -> None: ...
        def unpack(self, fmt, from_byte: Incomplete | None = None, to_byte: Incomplete | None = None): ...
    class ModbusService(BaseRequestHandler):
        @property
        def server_running(self): ...
        def setup(self) -> None: ...
        def handle(self) -> None: ...
    host: Incomplete
    port: Incomplete
    no_block: Incomplete
    ipv6: Incomplete
    ext_engine: Incomplete
    data_bank: Incomplete
    data_hdl: Incomplete
    device_id: Incomplete
    def __init__(self, host: str = 'localhost', port: int = 502, no_block: bool = False, ipv6: bool = False, data_bank: Incomplete | None = None, data_hdl: Incomplete | None = None, ext_engine: Incomplete | None = None, device_id: Incomplete | None = None) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    @property
    def is_run(self): ...
